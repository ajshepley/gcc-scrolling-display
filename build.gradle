// TODO: Clean up this mess of a grade buildfile.
group 'com.github.ajshepley'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.4.6'
    }
}

repositories {
    jcenter()
    mavenCentral()
    flatDir {
        dir 'lib'
    }
}

apply plugin: 'java'
apply plugin: 'c'
apply plugin: 'edu.sc.seis.launch4j'
apply plugin: 'application'

sourceCompatibility = 1.8
mainClassName = 'com.github.ajshepley.MainSketch'

ext {
    testngVersion = '6.14.3'
}

configurations {
    externalLibs
}

dependencies {
    compile ':core'
    compile ':serial'
    compile ':gluegen-rt'
    compile ':gluegen-rt-natives-windows-amd64'
    compile ':jogl-all'
    compile ':jogl-all-natives-windows-amd64'
    compile 'com.fasterxml.jackson.core:jackson-core:2.4.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1'
    compile ':jssc'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'org.testng', name: 'testng', version: "${testngVersion}"
//    compile group: 'org.scream3r', name: 'jssc', version: '2.8.0'
}

test {
    jvmArgs = ['-Djava.library.path=./lib']
}

jar {
    manifest {
        attributes (
                'Main-Class': mainClassName,
                "Class-Path": '.;' + configurations.compile.collect { it.getName() }.join(';')
        )
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def exeDir = 'executable'

// TODO: Configure proper error messages. https://github.com/TheBoegl/gradle-launch4j
launch4j {
    icon = "${projectDir}\\data\\controller.ico"
    mainClassName = mainClassName
    outputDir = "${exeDir}"
    jreMinVersion = sourceCompatibility
    jreMaxVersion = '1.9'
    bundledJre64Bit = true
    bundledJreAsFallback = true
    // FIXME: This doesn't seem to work right on windows.
    bundledJrePath = System.properties.'java.home'
    println "Bundling JRE at: " + System.properties.'java.home'
    downloadUrl = "https://adoptopenjdk.net/"
}

// TODO: Inline this into the jar, extract at runtime.
task copyData {
    doLast {
        copy {
            from 'data'
            into "$buildDir/${exeDir}/data"
            include '**/*.png'
        }
        copy {
            from './'
            into "$buildDir/${exeDir}"
            include 'config.json'
        }
    }
}

task removeUnnecessaryLibs(type: Delete) {
    delete "$buildDir/${exeDir}/lib"
}

test {
    useTestNG() {
        useDefaultListeners = true
    }

    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " output: " + event.message )
    }
}

defaultTasks 'clean', 'build', 'test', 'jar', 'createExe', 'copyData', 'removeUnnecessaryLibs'
